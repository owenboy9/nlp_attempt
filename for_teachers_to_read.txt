spythia works like this:

1) in text.txt there are tender buttons and mrs. dalloway in their entirety. that is spythia's reference text.
2) sort_and_save() (in all_pos_sorting_in_one) stores preprocessed (filtered, stripped, lemmatized, etc.) words in a dictionary of 8 prechosen part-of-speech lists.
3. one_word() (in word_by_word) takes the pos lists created by sort_and_safe() and stored in a variable, and returns ONE randomly chosen word (one list at a time)
4. convert_number_to_pos() (in menu) is an auxiliary function tailored specifically to translate user input (int) to spacy pos tags, which in their turn constitute the names of the pos lists from sort_and_safe()
5. menu() (in menu) is a menu function where the user chooses word categories by entering numbers that correspond to them (1 through 8), which – thanks to convert_number_to_pos() – trigger one_word() and return randomly chosen words for as long as the user wants to. the user has the option of adding newline, too. each time a new word is chosen, the function prints the whole poem in its current shape. when the user presses 'q', the entire poem is presented to them one final time. the function returns the poem as a list.
5. analyze_sentiment() (in book_writing) assesses a text's sentiment score. write_poem() (also in book_writing) uses that function to divide texts into five mood categories, which in their turn give name to text files the function creates to write poems into, according to their sentiment score. the function takes in a string.
6. piano() (in piano) calls sort_and_save() to create pos lists, accessible within the function. then it runs menu() and turns the resulting poem into a string that is subsequently saved in a corresponding mood-related text file (piano() calls write_poem() for that purpose), and printed neatly.
7. press_play() (in press play) calls piano() and the whole thing happens.